#!/usr/bin/env groovy

@Library('shareLibrary') _

def serviceName = "httpserver"
def repoUrl = "https://github.com/zhengyansheng/httpserver.git"

pipeline {
    agent any

    tools {
        go 'go124'
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
    }

    parameters {
        choice(name: 'action', choices: ['构建', '打包', '部署', '回滚'], description: '操作的指令')
        choice(name: 'branch', choices: ['dev', 'qa', 'uat', 'master', 'main'], description: '分支或Tag名称')
        choice(name: 'env', choices: ['dev', 'test', 'test2', 'test3', 'uat', 'prod'], description: '运行的环境')
        choice(name: 'codeType', choices: ['java', 'nodejs', 'common', 'go', 'python'], description: '代码类型')
    }

    environment {
        GOPROXY = 'https://goproxy.io,direct'
    }

    stages {

        stage('init') {
            when {
                expression { params.action == '构建' }
            }
            steps {
                echo "-------------------------------初始化准备工作------------------------------"
                script {
                    def init = new ops.init()
                    init.Init()
                }
            }
        }

        stage('checkout') {
            when {
                expression { params.action == '构建' }
            }
            steps {
                echo "-------------------------------克隆代码------------------------------"
                script {
                    def git = new ops.git()
                    git.CheckoutCode(repoUrl, "${params.branch}")
                }
            }
        }

        stage('build') {
            when {
                expression { params.action == '构建' }
            }
            steps {
                echo "$serviceName"
                echo "-------------------------------构建------------------------------"
                script {
                    def build = new ops.build()
                    build.CodeTypeMain(params.env, params.codeType, serviceName)
                }
            }
        }

        stage('pack') {
            when {
                expression { params.action == '打包' }
            }
            steps {
                echo "-------------------------------打包------------------------------"
                script {
                    def pack = new ops.pack()
                    pack.BuildImage(params.env, params.codeType, serviceName)
                }
            }
        }

        stage('deploy') {
            when {
                expression { params.action == '发版' }
            }
            steps {
                echo "-------------------------------部署------------------------------"
                script {
                    def deploy = new ops.deploy()
                    deploy.DeployToCluster(params.env, params.codeType, serviceName)
                }
            }
        }

        stage('rollback') {
            when {
                expression { params.action == '回滚' }
            }
            steps {
                echo "-------------------------------回滚------------------------------"
                script {
                    def deploy = new ops.deploy()
                    deploy.RollbackFromCluster(params.env, params.codeType, serviceName)
                }
            }
        }
    }

    post {
        always {
            script {
                try {
                    def endTime = System.currentTimeMillis()
                    def startTimeStr = readFile('build_start_time.txt').trim()
                    def startTime = startTimeStr.toLong()
                    def durationMillis = endTime - startTime

                    def seconds = (durationMillis / 1000).toInteger()
                    def minutes = (seconds / 60).toInteger()
                    def remainingSeconds = seconds % 60

                    echo "构建耗时：${minutes} 分 ${remainingSeconds} 秒（共 ${durationMillis} 毫秒）"
                } catch (Exception e) {
                    echo "⚠️ 计算耗时失败: ${e.message}"
                }
            }
        }

        success {
            echo '✅ Pipeline 执行成功！'
        }

        failure {
            echo '❌ Pipeline 执行失败。'
        }

        aborted {
            echo '❌ Pipeline 执行终止。'
        }
    }
}
